module parselib.simple.Core where

import frege.Prelude hiding (>>=,<$>,<*>,<*,*>,empty,return,sequence)

--- An input string is mapped to a list of successful parses.
-- For each succesful parse, we return the result of type 'r',
-- and the remaining input string. The input must be a list of
-- symbols.
type Parser s r = [s] -> [(r,[s])]

--- Parses any single symbol.
pAny :: Parser s s
pAny (x:xs) = [(x,xs)]
pAny []     = []

--- Takes a predicate and returns a parser that parses a
--- single symbol pSatisfying that predicate.
pSatisfy  ::  (s -> Bool) -> Parser s s
pSatisfy p (x:xs) | p x       =  [(x,xs)]
pSatisfy _ _                  =  []

--- Parser for the empty language, i.e., parser that always fails.
empty :: Parser s a
empty xs = []

--- Parser that always succeeds, i.e., for pEpsilon.
return :: a -> Parser s a
return r xs = [(r,xs)]

infixl 4 `<$>` `<*>`
infixr 3 `<|>` `<<|>`
infixl 1 `>>=`

--- Choice between two parsers with the same result type.
(<|>) :: Parser s a -> Parser s a -> Parser s a
(p <|> q) xs  =  p xs ++ q xs

--- Biased choice. If the left hand side parser succeeds,
--- the right hand side is not considered. Use with care!
(p <<|> q) xs  =  let r = p xs in if null r then q xs else r

--- Sequence of two parsers.
(<*>) :: Parser s (b -> a) -> Parser s b -> Parser s a
(p <*> q) xs  =  [(f x,zs)
                 |(f  ,ys) <- p xs
                 ,(  x,zs) <- q ys
                 ]

--- Map a function over the results of a parser. The '<$>' combinator
--- can also be defined in terms of 'succeed' and '<*>':
---
--- > f <$> p  =  succeed f <*> p
---
(<$>) :: (a -> b) -> Parser s a -> Parser s b
(f <$> p) xs  =  [(f y,ys)
                 |(  y,ys) <- p xs
                 ]

--- Monadic bind. Do not use this combinator unless absolutely
--- required. Most sequencing can be done with '<*>'.
(>>=) :: Parser s a -> (a -> Parser s b) -> Parser s b
(p >>= f) xs  =  [(z  ,zs)
                 |(y  ,ys) <- p xs
                 ,(z  ,zs) <- f y ys
                 ]

--- Returns the rest of the input without consuming anything.
look :: Parser s [s]
look xs = [(xs, xs)]

--- For compatibility with the "newtype" version of the library:
--- runs a parser on a given string.
runParser :: Parser s a -> [s] -> [(a, [s])]
runParser = id