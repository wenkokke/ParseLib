module parselib.examples.Arith where

import frege.Prelude hiding (>>=,<$>,<*>,<*,*>,empty,return,sequence)
import parselib.Simple

data Expr = Num Int
          | Add Expr Expr
          | Mul Expr Expr
          
derive Show Expr
          
--- simple parser for basic arithmetic
pExpr :: Parser Char Expr
pExpr = pNum <<|> pAdd <|> pMul
  where
  pNum = Num <$> pNatural
  pAdd = let sAdd = pSymbol '+' in pParens $ Add <$ (sAdd <* sWSP) <*> (pExpr <* sWSP) <*> pExpr
  pMul = let sMul = pSymbol '*' in pParens $ Mul <$ (sMul <* sWSP) <*> (pExpr <* sWSP) <*> pExpr
  sWSP = pSymbol ' '
  
--- top-level function for running parser
parse :: String -> Maybe Expr
parse input =
  let
    parse = runParser pExpr (unpacked input)
  in case parse of
    [(expr, [])] -> Just expr
    _ -> Nothing
  