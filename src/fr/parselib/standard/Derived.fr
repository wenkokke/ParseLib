module parselib.standard.Derived where

import parselib.standard.Core

infixl 4 `<$`
infixl 4 `<*`
infixl 4 `*>`

--- Variant of '<$>' that ignores the result of the parser.
---
--- > f <$ p = const f <$> p
---
(<$) :: b -> Parser s a -> Parser s b
f <$ p = const f <$> p

--- Variant of '<*>' that ignores the result of the right
--- argument.
---
--- > f <* p = const <$> p <*> q
---
(<*) :: Parser s a -> Parser s b -> Parser s a
p <* q = const <$> p <*> q

--- Variant of '*>' that ignores the result of the left
--- argument.
---
--- > f *> p = flip const <$> p <*> q
---
(*>) :: Parser s a -> Parser s b -> Parser s b
p *> q = flip const <$> p <*> q

--- Parser for pEpsilon that does return '()'.
pEpsilon :: Parser s ()
pEpsilon = pure ()

--- Parses a specific given pSymbol.
pSymbol :: Eq s  => s -> Parser s s
pSymbol x = pSatisfy (==x)

--- Parses a specific given sequence of pSymbols.
pToken :: Eq s => [s] -> Parser s [s]
pToken []     = pure []
pToken (x:xs) = (:) <$> pSymbol x <*> pToken xs

--- Takes three parsers: a delimiter, the parser for the
--- content, and another delimiter. Constructs a sequence of
--- the three, but returns only the result of the enclosed
--- parser.
pPack :: Parser s a -> Parser s b -> Parser s c -> Parser s b
pPack p r q  =  p *> r <* q

--- Takes a list of parsers and combines them in
--- sequence, returning a list of results.
sequence :: [Parser s a] -> Parser s [a]
sequence []      =  pure []
sequence (p:ps)  =  (:) <$> p <*> sequence ps

--- Takes a list of parsers and combines them using
--- choice.
choice :: [Parser s a] -> Parser s a
choice = foldr (<|>) empty

--- Parses an optional element. Takes the default value
--- as its second argument.
opt :: Parser s a -> a -> Parser s a
opt p d = p <|> pure d

--- Variant of 'option' that returns a 'Maybe',
--- provided for compatibility with the applicative interface.
pMaybe :: Parser s a -> Parser s (Maybe a)
pMaybe p = opt (Just <$> p) Nothing

--- Parses many, i.e., zero or more, occurrences of
--- a given parser.
pMany_ng :: Parser s a  -> Parser s [a]
pMany_ng p  =  (:) <$> p <*> pMany_ng p <|> pure []

--- Parser some, i.e., one or more, occurrences of
--- a given parser.
pSome_ng :: Parser s a -> Parser s [a]
pSome_ng p = (:) <$> p <*> pMany_ng p

--- Takes a parser @p@ and a separator parser @s@. Parses
--- a sequence of @p@s that is separated by @s@s.
pListSep :: Parser s a -> Parser s b -> Parser s [a]
pListSep p s = (:) <$> p <*> pMany (s *> p)

--- Takes a parser @pe@ and an operator parser @po@. Parses
--- a sequence of @pe@s separated by @po@s. The results are
--- combined using the operator associated with @po@ in a
--- right-associative way.
chainr  ::  Parser s a -> Parser s (a -> a -> a) -> Parser s a
chainr pe po  =  h <$> many (j <$> pe <*> po) <*> pe
  where j x op  =  (x `op`)
        h fs x  =  foldr ($) x fs

--- Takes a parser @pe@ and an operator parser @po@. Parses
--- a sequence of @pe@s separated by @po@s. The results are
--- combined using the operator associated with @po@ in a
--- left-associative way.
chainl  ::  Parser s a -> Parser s (a -> a -> a) -> Parser s a
chainl pe po  =  h <$> pe <*> many (j <$> po <*> pe)
  where j op x  =  (`op` x)
        h x fs  =  foldl (flip ($)) x fs

--- Greedy variant of 'many'.
pMany :: Parser s b -> Parser s [b]
pMany p = (:) <$> p <*> pMany p <<|> pure []

--- Greedy variant of 'many1'.
pSome :: Parser s b -> Parser s [b]
pSome p = (:) <$> p <*> pMany

--- Succeeds only on the end of the input.
pEnd :: Parser s ()
pEnd = look >>= \xs -> if null xs then pure () else empty

