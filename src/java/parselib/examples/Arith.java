/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.21.107-g4bd09eb from Arith.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/


package parselib.examples;

import frege.prelude.PreludeList;
import frege.prelude.Arrays;
import frege.java.IO;
import frege.Prelude;
import frege.java.Lang;
import frege.prelude.PreludeBase;
import frege.prelude.Maybe;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeNative;
import frege.prelude.PreludeMonad;
import parselib.Simple;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@frege.runtime.Meta.FregePackage(
  source="Arith.fr", time=1364231356520L,
  ops={
    @frege.runtime.Meta.Operator(name="??", kind=1, prec=2),
    @frege.runtime.Meta.Operator(name="+", kind=0, prec=4),
    @frege.runtime.Meta.Operator(name="%", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="!~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="!=", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="!!", kind=0, prec=1),
    @frege.runtime.Meta.Operator(name="!==", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="$", kind=1, prec=16),
    @frege.runtime.Meta.Operator(name="$!", kind=1, prec=16),
    @frege.runtime.Meta.Operator(name="*", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="&&", kind=1, prec=11),
    @frege.runtime.Meta.Operator(name="**", kind=1, prec=2),
    @frege.runtime.Meta.Operator(name="*>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="++", kind=1, prec=4),
    @frege.runtime.Meta.Operator(name="/=", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="/", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="/~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name=":", kind=1, prec=13),
    @frege.runtime.Meta.Operator(name="<=<", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="<$>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name=":=", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="<$", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<*", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<*>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<<|>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="<<", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="<=", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="<~", kind=1, prec=1),
    @frege.runtime.Meta.Operator(name="<=>", kind=2, prec=9),
    @frege.runtime.Meta.Operator(name="<|>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="==", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="=<<", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="===", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name=">=", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name=">", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="=~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name=">>", kind=0, prec=14),
    @frege.runtime.Meta.Operator(name=">=>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name=">>=", kind=0, prec=14),
    @frege.runtime.Meta.Operator(name="elem", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="bshl", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="\\\\", kind=2, prec=3),
    @frege.runtime.Meta.Operator(name="@", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="?~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="band", kind=0, prec=6),
    @frege.runtime.Meta.Operator(name="^^", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="bor", kind=0, prec=7),
    @frege.runtime.Meta.Operator(name="compare", kind=2, prec=9),
    @frege.runtime.Meta.Operator(name="bxor", kind=0, prec=7),
    @frege.runtime.Meta.Operator(name="bshr", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="catch", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="div", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="either", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="ushr", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="notElem", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="mod", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="fmap", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="finally", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="mplus", kind=1, prec=4),
    @frege.runtime.Meta.Operator(name="rem", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="quot", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="oder", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="und", kind=1, prec=11),
    @frege.runtime.Meta.Operator(name="seq", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="~~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="||", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="~>", kind=0, prec=1),
    @frege.runtime.Meta.Operator(name="~~~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="•", kind=1, prec=1)
  },
  imps={
    "frege.prelude.PreludeList", "frege.prelude.PreludeBase", "frege.Prelude",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeNative", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "parselib.Simple"
  },
  nmss={
    "PreludeList", "PreludeBase", "Prelude", "PreludeIO", "PreludeNative", "PreludeMonad",
    "PreludeText", "Simple"
  },
  symas={}, symcs={},
  symis={
    @frege.runtime.Meta.SymI(
      offset=252,
      name=@frege.runtime.Meta.QName(kind=0, pack="parselib.examples.Arith", base="Show_Expr"),
      clas=@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeText", base="Show"),
      typ=0, lnks={},
      funs={
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showList"
          ),
          stri="s(ss)", sig=3, depth=2, rkind=49, doc="inherited from 'Show.showList'"
        ),
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="show"
          ),
          stri="s(s)", sig=4, depth=1, rkind=49, doc="Function generated for derived istance."
        ),
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="display"
          ),
          stri="s(s)", sig=4, depth=1, rkind=49, doc="inherited from 'Show.display'"
        ),
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showChars"
          ),
          stri="s(u)", sig=5, depth=1, rkind=48, doc="inherited from 'Show.showChars'"
        ),
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showsub"
          ),
          stri="s(s)", sig=4, depth=1, rkind=49, doc="Function generated for derived istance."
        ),
        @frege.runtime.Meta.SymV(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showsPrec"
          ),
          stri="s(uss)", sig=7, depth=3, rkind=49, doc="inherited from 'Show.showsPrec'"
        )
      }
    )
  },
  symts={
    @frege.runtime.Meta.SymT(
      offset=170,
      name=@frege.runtime.Meta.QName(kind=0, pack="parselib.examples.Arith", base="Expr"),
      typ=0, kind=0,
      cons={
        @frege.runtime.Meta.SymD(
          offset=225,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="Mul"
          ),
          cid=2, typ=8,
          fields={
            @frege.runtime.Meta.Field(offset=0, sigma=0, strict=false),
            @frege.runtime.Meta.Field(offset=0, sigma=0, strict=false)
          }
        ),
        @frege.runtime.Meta.SymD(
          offset=198,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="Add"
          ),
          cid=1, typ=8,
          fields={
            @frege.runtime.Meta.Field(offset=0, sigma=0, strict=false),
            @frege.runtime.Meta.Field(offset=0, sigma=0, strict=false)
          }
        ),
        @frege.runtime.Meta.SymD(
          offset=177,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="Num"
          ),
          cid=0, typ=9, fields={@frege.runtime.Meta.Field(offset=0, sigma=6, strict=false)}
        )
      },
      lnks={
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="show"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="show"
          )
        ),
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="display"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="display"
          )
        ),
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="showList"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showList"
          )
        ),
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="showChars"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showChars"
          )
        ),
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="showsub"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showsub"
          )
        ),
        @frege.runtime.Meta.SymL(
          offset=252,
          name=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Expr", member="showsPrec"
          ),
          alias=@frege.runtime.Meta.QName(
            kind=2, pack="parselib.examples.Arith", base="Show_Expr", member="showsPrec"
          )
        )
      },
      funs={}
    )
  },
  symvs={
    @frege.runtime.Meta.SymV(
      offset=282, name=@frege.runtime.Meta.QName(pack="parselib.examples.Arith", base="pExpr"),
      stri="s(u)", sig=11, depth=1, rkind=48
    ),
    @frege.runtime.Meta.SymV(
      offset=600, name=@frege.runtime.Meta.QName(pack="parselib.examples.Arith", base="parse"),
      stri="s(u)", sig=12, depth=1, rkind=49
    )
  },
  symls={
    @frege.runtime.Meta.SymL(
      offset=198, name=@frege.runtime.Meta.QName(pack="parselib.examples.Arith", base="Add"),
      alias=@frege.runtime.Meta.QName(
        kind=2, pack="parselib.examples.Arith", base="Expr", member="Add"
      )
    ),
    @frege.runtime.Meta.SymL(
      offset=225, name=@frege.runtime.Meta.QName(pack="parselib.examples.Arith", base="Mul"),
      alias=@frege.runtime.Meta.QName(
        kind=2, pack="parselib.examples.Arith", base="Expr", member="Mul"
      )
    ),
    @frege.runtime.Meta.SymL(
      offset=177, name=@frege.runtime.Meta.QName(pack="parselib.examples.Arith", base="Num"),
      alias=@frege.runtime.Meta.QName(
        kind=2, pack="parselib.examples.Arith", base="Expr", member="Num"
      )
    )
  },
  taus={
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="parselib.examples.Arith", base="Expr")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=1, subb=0),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=4),
    @frege.runtime.Meta.Tau(kind=0, suba=1, subb=4),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=8, subb=0),
    @frege.runtime.Meta.Tau(kind=0, suba=9, subb=6),
    @frege.runtime.Meta.Tau(kind=0, suba=1, subb=10),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Maybe")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=12, subb=0)
  },
  rhos={
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=0),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=2),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=5), @frege.runtime.Meta.Rho(sigma=2, rhotau=2),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=3), @frege.runtime.Meta.Rho(sigma=0, rhotau=2),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=6), @frege.runtime.Meta.Rho(sigma=0, rhotau=6),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=7), @frege.runtime.Meta.Rho(sigma=0, rhotau=3),
    @frege.runtime.Meta.Rho(sigma=6, rhotau=9), @frege.runtime.Meta.Rho(sigma=0, rhotau=0),
    @frege.runtime.Meta.Rho(sigma=0, rhotau=11), @frege.runtime.Meta.Rho(sigma=6, rhotau=0),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=11),
    @frege.runtime.Meta.Rho(sigma=10, rhotau=14),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=13),
    @frege.runtime.Meta.Rho(sigma=2, rhotau=16)
  },
  sigmas={
    @frege.runtime.Meta.Sigma(rho=0), @frege.runtime.Meta.Sigma(rho=1),
    @frege.runtime.Meta.Sigma(rho=2), @frege.runtime.Meta.Sigma(rho=4),
    @frege.runtime.Meta.Sigma(rho=5), @frege.runtime.Meta.Sigma(rho=7),
    @frege.runtime.Meta.Sigma(rho=8), @frege.runtime.Meta.Sigma(rho=10),
    @frege.runtime.Meta.Sigma(rho=12), @frege.runtime.Meta.Sigma(rho=13),
    @frege.runtime.Meta.Sigma(rho=6), @frege.runtime.Meta.Sigma(rho=15),
    @frege.runtime.Meta.Sigma(rho=17)
  },
  exprs={@frege.runtime.Meta.Expr()}, kinds={@frege.runtime.Meta.Kind(kind=0)}
)

final public class Arith {
final public static Ĳ ĳ = new Ĳ();
public interface TExpr extends frege.runtime.Value, frege.runtime.Lazy {
  public TExpr.DAdd _Add() ;
  public TExpr.DMul _Mul() ;
  public TExpr.DNum _Num() ;
  final public static class DAdd extends frege.runtime.Algebraic implements TExpr {
    private DAdd(final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2) {
      mem1 = arg$1;
      mem2 = arg$2;
    }
    final public int _constructor() {
      return 1;
    }
    final public static TExpr mk(
      final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
    ) {
      return new DAdd(arg$1, arg$2);
    }
    final public static frege.runtime.Func2 mkƒ = new Arith.Lambda2a(0);
    final public DAdd _Add() {
      return this;
    }
    final public TExpr.DMul _Mul() {
      return null;
    }
    final public TExpr.DNum _Num() {
      return null;
    }
    final public frege.runtime.Lazy mem1 ;
    final public frege.runtime.Lazy mem2 ;
  }
  final public static class DMul extends frege.runtime.Algebraic implements TExpr {
    private DMul(final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2) {
      mem1 = arg$1;
      mem2 = arg$2;
    }
    final public int _constructor() {
      return 2;
    }
    final public static TExpr mk(
      final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
    ) {
      return new DMul(arg$1, arg$2);
    }
    final public static frege.runtime.Func2 mkƒ = new Arith.Lambda2a(1);
    final public DMul _Mul() {
      return this;
    }
    final public TExpr.DAdd _Add() {
      return null;
    }
    final public TExpr.DNum _Num() {
      return null;
    }
    final public frege.runtime.Lazy mem1 ;
    final public frege.runtime.Lazy mem2 ;
  }
  final public static class DNum extends frege.runtime.Algebraic implements TExpr {
    private DNum(final java.lang.Object arg$1) {
      mem1 = arg$1;
    }
    final public int _constructor() {
      return 0;
    }
    final public static TExpr mk(final java.lang.Object arg$1) {
      return new DNum(arg$1);
    }
    final public static frege.runtime.Func1 mkƒ = new Arith.Lambda1a(0);
    final public DNum _Num() {
      return this;
    }
    final public TExpr.DAdd _Add() {
      return null;
    }
    final public TExpr.DMul _Mul() {
      return null;
    }
    final public java.lang.Object mem1 ;
  }
}
final public static class IShow_Expr implements PreludeText.CShow {
  public IShow_Expr() {}
  final public static IShow_Expr it = new IShow_Expr();
  final public frege.runtime.Lambda ƒshow() {
    return IShow_Expr.showƒ;
  }
  final public frege.runtime.Lambda ƒdisplay() {
    return IShow_Expr.displayƒ;
  }
  final public frege.runtime.Lambda ƒshowList() {
    return IShow_Expr.showListƒ;
  }
  final public frege.runtime.Lambda ƒshowChars() {
    return IShow_Expr.showCharsƒ;
  }
  final public frege.runtime.Lambda ƒshowsub() {
    return IShow_Expr.showsubƒ;
  }
  final public frege.runtime.Lambda ƒshowsPrec() {
    return IShow_Expr.showsPrecƒ;
  }
  final public static frege.runtime.Func1 displayƒ = new Arith.Lambda1a(1);
  final public static frege.runtime.Func1 showƒ = new Arith.Lambda1a(2);
  final public static frege.runtime.Func1 showCharsƒ = new Arith.Lambda1a(3);
  final public static frege.runtime.Func2 showListƒ = new Arith.Lambda2a(2);
  final public static frege.runtime.Func3 showsPrecƒ = new Arith.Lambda3a(0);
  final public static frege.runtime.Func1 showsubƒ = new Arith.Lambda1a(4);
  final public static java.lang.String display(final TExpr arg$1) {
    return IShow_Expr.show(arg$1);
  }
  final public static java.lang.String show(final TExpr arg$1) {
    final TExpr.DNum $100000 = arg$1._Num();
    if ($100000 != null) {
      final int a1_3253 = (int)frege.runtime.Delayed.<java.lang.Integer>forced($100000.mem1);
      return PreludeBase.TStringJ._plus_plus(
                PreludeBase.TStringJ._plus_plus("Num", " "),
                PreludeText.IShow_Int.showsub(a1_3253)
              );
    }
    final TExpr.DAdd $100002 = arg$1._Add();
    if ($100002 != null) {
      final TExpr a2_3255 = $100002.mem2.<TExpr>forced();
      final TExpr a1_3254 = $100002.mem1.<TExpr>forced();
      return PreludeBase.TStringJ._plus_plus(
                PreludeBase.TStringJ._plus_plus(
                      PreludeBase.TStringJ._plus_plus(
                            PreludeBase.TStringJ._plus_plus("Add", " "),
                            IShow_Expr.showsub(a1_3254)
                          ),
                      " "
                    ),
                IShow_Expr.showsub(a2_3255)
              );
    }
    final TExpr.DMul $100005 = arg$1._Mul();
    assert $100005 != null;
    final TExpr a2_3257 = $100005.mem2.<TExpr>forced();
    final TExpr a1_3256 = $100005.mem1.<TExpr>forced();
    return PreludeBase.TStringJ._plus_plus(
              PreludeBase.TStringJ._plus_plus(
                    PreludeBase.TStringJ._plus_plus(
                          PreludeBase.TStringJ._plus_plus("Mul", " "),
                          IShow_Expr.showsub(a1_3256)
                        ),
                    " "
                  ),
              IShow_Expr.showsub(a2_3257)
            );
  }
  final public static frege.runtime.Lazy showChars(final frege.runtime.Lazy arg$1) {
    return frege.runtime.Delayed.<PreludeBase.TList>forced(
              PreludeBase._bullet(
                    PreludeList.IListSource_StringJ.toListƒ, IShow_Expr.showƒ, arg$1
                  )
            );
  }
  final public static java.lang.String showList(
    final PreludeBase.TList arg$1, final java.lang.String arg$2
  ) {
    return PreludeBase.TStringJ._plus_plus(
              "[",
              PreludeBase.TStringJ._plus_plus(
                    frege.runtime.Delayed.<java.lang.String>forced(
                          PreludeText.joined(", ", PreludeList.map(IShow_Expr.showƒ, arg$1))
                        ),
                    PreludeBase.TStringJ._plus_plus("]", arg$2)
                  )
            );
  }
  final public static java.lang.String showsPrec(
    final java.lang.Object arg$1, final TExpr arg$2, final java.lang.String arg$3
  ) {
    return PreludeBase.TStringJ._plus_plus(IShow_Expr.show(arg$2), arg$3);
  }
  final public static java.lang.String showsub(final TExpr arg$1) {
    final TExpr.DNum $100008 = arg$1._Num();
    if ($100008 != null) {
      final int a1_3259 = (int)frege.runtime.Delayed.<java.lang.Integer>forced($100008.mem1);
      return PreludeBase.TStringJ._plus_plus(
                PreludeBase.TStringJ._plus_plus(
                      "(",
                      PreludeBase.TStringJ._plus_plus(
                            PreludeBase.TStringJ._plus_plus("Num", " "),
                            PreludeText.IShow_Int.showsub(a1_3259)
                          )
                    ),
                ")"
              );
    }
    final TExpr.DAdd $100010 = arg$1._Add();
    if ($100010 != null) {
      final TExpr a2_3261 = $100010.mem2.<TExpr>forced();
      final TExpr a1_3260 = $100010.mem1.<TExpr>forced();
      return PreludeBase.TStringJ._plus_plus(
                PreludeBase.TStringJ._plus_plus(
                      "(",
                      PreludeBase.TStringJ._plus_plus(
                            PreludeBase.TStringJ._plus_plus(
                                  PreludeBase.TStringJ._plus_plus(
                                        PreludeBase.TStringJ._plus_plus("Add", " "),
                                        IShow_Expr.showsub(a1_3260)
                                      ),
                                  " "
                                ),
                            IShow_Expr.showsub(a2_3261)
                          )
                    ),
                ")"
              );
    }
    final TExpr.DMul $100013 = arg$1._Mul();
    assert $100013 != null;
    final TExpr a2_3263 = $100013.mem2.<TExpr>forced();
    final TExpr a1_3262 = $100013.mem1.<TExpr>forced();
    return PreludeBase.TStringJ._plus_plus(
              PreludeBase.TStringJ._plus_plus(
                    "(",
                    PreludeBase.TStringJ._plus_plus(
                          PreludeBase.TStringJ._plus_plus(
                                PreludeBase.TStringJ._plus_plus(
                                      PreludeBase.TStringJ._plus_plus("Mul", " "),
                                      IShow_Expr.showsub(a1_3262)
                                    ),
                                " "
                              ),
                          IShow_Expr.showsub(a2_3263)
                        )
                  ),
              ")"
            );
  }
}
final public static frege.runtime.Lazy pExpr(final frege.runtime.Lazy arg$1) {
  final class FsWSP_3245 extends frege.runtime.Func1  {
    final public PreludeBase.TList work(final PreludeBase.TList arg$2) {
      final FsWSP_3245 this3245 = this;
      return Simple.pSymbol(PreludeBase.IEq_Char.it, ' ', arg$2);
    }
    final public PreludeBase.TList eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
    }
  }
  final FsWSP_3245 sWSP_3245 = new FsWSP_3245();
  final class FpMul_3244 extends frege.runtime.Func1  {
    final public frege.runtime.Lazy work(final frege.runtime.Lazy arg$2) {
      final FpMul_3244 this3244 = this;
      return frege.runtime.Delayed.<frege.runtime.Applicable>forced(
                PreludeBase._dollar(
                      Simple.Ĳ.pParensƒ,
                      Simple.Ĳ._lt_star_gtƒ.apply(
                            Simple.Ĳ._lt_star_gtƒ.apply(
                                  Simple.Ĳ._lt$ƒ.apply(TExpr.DMul.mkƒ).apply(
                                        Simple.Ĳ._lt_starƒ.apply(
                                              Simple.Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(
                                                    '*'
                                                  ).result()
                                            ).apply(sWSP_3245).result()
                                      ).result()
                                ).apply(
                                  Simple.Ĳ._lt_starƒ.apply(Ĳ.pExprƒ).apply(sWSP_3245).result()
                                ).result()
                          ).apply(Ĳ.pExprƒ).result()
                    )
              ).apply(arg$2).result().<PreludeBase.TList>forced();
    }
    final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.delayed(arg$1));
    }
  }
  final FpMul_3244 pMul_3244 = new FpMul_3244();
  final class FpAdd_3243 extends frege.runtime.Func1  {
    final public frege.runtime.Lazy work(final frege.runtime.Lazy arg$2) {
      final FpAdd_3243 this3243 = this;
      return frege.runtime.Delayed.<frege.runtime.Applicable>forced(
                PreludeBase._dollar(
                      Simple.Ĳ.pParensƒ,
                      Simple.Ĳ._lt_star_gtƒ.apply(
                            Simple.Ĳ._lt_star_gtƒ.apply(
                                  Simple.Ĳ._lt$ƒ.apply(TExpr.DAdd.mkƒ).apply(
                                        Simple.Ĳ._lt_starƒ.apply(
                                              Simple.Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(
                                                    '+'
                                                  ).result()
                                            ).apply(sWSP_3245).result()
                                      ).result()
                                ).apply(
                                  Simple.Ĳ._lt_starƒ.apply(Ĳ.pExprƒ).apply(sWSP_3245).result()
                                ).result()
                          ).apply(Ĳ.pExprƒ).result()
                    )
              ).apply(arg$2).result().<PreludeBase.TList>forced();
    }
    final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.delayed(arg$1));
    }
  }
  final FpAdd_3243 pAdd_3243 = new FpAdd_3243();
  return frege.runtime.Delayed.<PreludeBase.TList>forced(
            Simple._lt_lt_bar_gt(
                  PreludeList.IListLike__lbrack_rbrack.it,
                  Simple.Ĳ._lt$_gtƒ.apply(TExpr.DNum.mkƒ).apply(Simple.Ĳ.pNaturalƒ).result(),
                  Simple.Ĳ._lt_bar_gtƒ.apply(pAdd_3243).apply(pMul_3244).result(), arg$1
                )
          );
}
final public static PreludeBase.TMaybe parse(final java.lang.Object arg$1) {
  final PreludeBase.TList $100016 = 
    Simple.runParser(Ĳ.pExprƒ, PreludeList.Ĳ.unpackedƒ.apply(arg$1))
  ;
  final PreludeBase.TList.DCons $100017 = $100016._Cons();
  if ($100017 != null) {
    final PreludeBase.TList $100018 = $100017.mem2.<PreludeBase.TList>forced();
    final PreludeBase.TList.DList $100019 = $100018._List();
    if ($100019 != null) {
      final PreludeBase.TTuple2 $100020 = 
        frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100017.mem1)
      ;
      final PreludeBase.TList $100021 = 
        frege.runtime.Delayed.<PreludeBase.TList>forced($100020.mem2)
      ;
      final PreludeBase.TList.DList $100022 = $100021._List();
      if ($100022 != null) {
        return PreludeBase.TMaybe.DJust.mk(frege.runtime.Delayed.delayed($100020.mem1));
      }
    }
  }
  return PreludeBase.TMaybe.DNothing.it;
}
public static class Ĳ  {
  public Ĳ() {}
  final public static frege.runtime.Func1 pExprƒ = new Arith.Lambda1a(5);
  final public static frege.runtime.Func1 parseƒ = new Arith.Lambda1a(6);
}
final private static class Lambda2a extends frege.runtime.Func2  {
  final int index ;
  public Lambda2a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return TExpr.DAdd.mk(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 1: {
        return TExpr.DMul.mk(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 2: {
        return IShow_Expr.showList(
                  frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1),
                  frege.runtime.Delayed.<java.lang.String>forced(arg$2)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda1a extends frege.runtime.Func1  {
  final int index ;
  public Lambda1a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(final java.lang.Object arg$1) {
    switch (index) {
      case 0: {
        return TExpr.DNum.mk(arg$1);
      }
      case 1: {
        return IShow_Expr.display(frege.runtime.Delayed.<TExpr>forced(arg$1));
      }
      case 2: {
        return IShow_Expr.show(frege.runtime.Delayed.<TExpr>forced(arg$1));
      }
      case 3: {
        return IShow_Expr.showChars(frege.runtime.Delayed.delayed(arg$1));
      }
      case 4: {
        return IShow_Expr.showsub(frege.runtime.Delayed.<TExpr>forced(arg$1));
      }
      case 5: {
        return Arith.pExpr(frege.runtime.Delayed.delayed(arg$1));
      }
      case 6: {
        return Arith.parse(arg$1);
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda3a extends frege.runtime.Func3  {
  final int index ;
  public Lambda3a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$3, final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return IShow_Expr.showsPrec(
                  arg$1, frege.runtime.Delayed.<TExpr>forced(arg$2),
                  frege.runtime.Delayed.<java.lang.String>forced(arg$3)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
}
