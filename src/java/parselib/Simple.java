/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.21.107-g4bd09eb from Simple.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/


package parselib;

import frege.prelude.PreludeList;
import frege.prelude.Arrays;
import frege.java.IO;
import frege.Prelude;
import frege.java.Lang;
import frege.prelude.PreludeBase;
import frege.prelude.Maybe;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeNative;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@frege.runtime.Meta.FregePackage(
  source="Simple.fr", time=1364231302869L,
  ops={
    @frege.runtime.Meta.Operator(name="??", kind=1, prec=2),
    @frege.runtime.Meta.Operator(name="+", kind=0, prec=4),
    @frege.runtime.Meta.Operator(name="%", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="!~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="!=", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="!!", kind=0, prec=1),
    @frege.runtime.Meta.Operator(name="!==", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="$", kind=1, prec=16),
    @frege.runtime.Meta.Operator(name="$!", kind=1, prec=16),
    @frege.runtime.Meta.Operator(name="*", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="&&", kind=1, prec=11),
    @frege.runtime.Meta.Operator(name="**", kind=1, prec=2),
    @frege.runtime.Meta.Operator(name="*>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="++", kind=1, prec=4),
    @frege.runtime.Meta.Operator(name="/=", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="/", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="/~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name=":", kind=1, prec=13),
    @frege.runtime.Meta.Operator(name="<=<", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="<$>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name=":=", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="<$", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<*", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<*>", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="<<|>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="<<", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="<=", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="<~", kind=1, prec=1),
    @frege.runtime.Meta.Operator(name="<=>", kind=2, prec=9),
    @frege.runtime.Meta.Operator(name="<|>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name="==", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name="=<<", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="===", kind=2, prec=10),
    @frege.runtime.Meta.Operator(name=">=", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name=">", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="=~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name=">>", kind=0, prec=14),
    @frege.runtime.Meta.Operator(name=">=>", kind=1, prec=14),
    @frege.runtime.Meta.Operator(name=">>=", kind=0, prec=16),
    @frege.runtime.Meta.Operator(name="elem", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="bshl", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="\\\\", kind=2, prec=3),
    @frege.runtime.Meta.Operator(name="@", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="?~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="band", kind=0, prec=6),
    @frege.runtime.Meta.Operator(name="^^", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="bor", kind=0, prec=7),
    @frege.runtime.Meta.Operator(name="compare", kind=2, prec=9),
    @frege.runtime.Meta.Operator(name="bxor", kind=0, prec=7),
    @frege.runtime.Meta.Operator(name="bshr", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="catch", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="div", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="either", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="ushr", kind=0, prec=5),
    @frege.runtime.Meta.Operator(name="notElem", kind=2, prec=8),
    @frege.runtime.Meta.Operator(name="mod", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="fmap", kind=0, prec=13),
    @frege.runtime.Meta.Operator(name="finally", kind=0, prec=15),
    @frege.runtime.Meta.Operator(name="mplus", kind=1, prec=4),
    @frege.runtime.Meta.Operator(name="rem", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="quot", kind=0, prec=3),
    @frege.runtime.Meta.Operator(name="oder", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="und", kind=1, prec=11),
    @frege.runtime.Meta.Operator(name="seq", kind=1, prec=15),
    @frege.runtime.Meta.Operator(name="~~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="||", kind=1, prec=12),
    @frege.runtime.Meta.Operator(name="~>", kind=0, prec=1),
    @frege.runtime.Meta.Operator(name="~~~", kind=2, prec=2),
    @frege.runtime.Meta.Operator(name="•", kind=1, prec=1)
  },
  imps={
    "frege.prelude.PreludeNative", "frege.prelude.PreludeList", "frege.prelude.PreludeBase",
    "frege.Prelude", "frege.prelude.PreludeIO", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText"
  },
  nmss={
    "PreludeNative", "PreludeList", "PreludeBase", "Prelude", "PreludeIO", "PreludeMonad",
    "PreludeText"
  },
  symas={
    @frege.runtime.Meta.SymA(
      offset=294, name=@frege.runtime.Meta.QName(kind=0, pack="parselib.Simple", base="Parser"),
      vars={0, 1}, typ=0, kind=1
    )
  },
  symcs={}, symis={}, symts={},
  symvs={
    @frege.runtime.Meta.SymV(
      offset=2884, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="*>"),
      stri="s(suu)", sig=4, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=1360, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<*>"),
      stri="s(suu)", sig=6, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=1698, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<$>"),
      stri="s(usu)", sig=8, depth=3, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=2524, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<$"),
      stri="s(usu)", sig=10, depth=3, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=2696, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<*"),
      stri="s(suu)", sig=11, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=1270, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<<|>"),
      stri="s(uuu)", sig=14, depth=3, rkind=48
    ),
    @frege.runtime.Meta.SymV(
      offset=1073, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="<|>"),
      stri="s(suu)", sig=15, depth=3, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=1943, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base=">>="),
      stri="s(suu)", sig=17, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=4999, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="chainr"),
      stri="s(suu)", sig=19, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=5382, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="chainl"),
      stri="s(suu)", sig=19, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=3867, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="choice"),
      stri="s(su)", sig=21, depth=2, rkind=48
    ),
    @frege.runtime.Meta.SymV(
      offset=6007,
      name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="getNumericValue"),
      stri="s(s)", sig=23, nativ="java.lang.Character.getNumericValue", pur=true, depth=1,
      rkind=33
    ),
    @frege.runtime.Meta.SymV(
      offset=5927, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="isDigit"),
      stri="s(s)", sig=24, nativ="java.lang.Character.isDigit", pur=true, depth=1, rkind=33
    ),
    @frege.runtime.Meta.SymV(
      offset=6086, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="isLetter"),
      stri="s(s)", sig=24, nativ="java.lang.Character.isLetter", pur=true, depth=1, rkind=33
    ),
    @frege.runtime.Meta.SymV(
      offset=6166,
      name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="isLetterOrDigit"),
      stri="s(s)", sig=24, nativ="java.lang.Character.isLetterOrDigit", pur=true, depth=1,
      rkind=33
    ),
    @frege.runtime.Meta.SymV(
      offset=2179, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="look"),
      stri="s(u)", sig=25, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=519, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pSatisfy"),
      stri="s(us)", sig=27, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=4189, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="optional"),
      stri="s(su)", sig=28, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=4017, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="opt"),
      stri="s(suu)", sig=30, depth=3, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=818, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pFail"),
      stri="s(u)", sig=31, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=707, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pEmpty"),
      stri="s(u)", sig=31, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=6235, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pDigit"),
      stri="s(s)", sig=33, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=6836, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pBrace"),
      stri="s(uu)", sig=35, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=356, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pAny"),
      stri="s(s)", sig=36, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=6743, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pBracket"),
      stri="s(uu)", sig=35, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=6289, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pDigitAsInt"),
      stri="s(u)", sig=37, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=3011, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pEpsilon"),
      stri="s(u)", sig=38, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=5834, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pEnd"),
      stri="s(u)", sig=38, depth=1, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=4345, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pMany_ng"),
      stri="s(su)", sig=39, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=4695, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pListSep"),
      stri="s(suu)", sig=40, depth=3, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=6454, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pInteger"),
      stri="s(u)", sig=37, depth=1, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=6550, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pIdent"),
      stri="s(u)", sig=41, depth=1, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=6925, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pList"),
      stri="s(su)", sig=42, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=5605, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pMany"),
      stri="s(uu)", sig=43, depth=2, rkind=48
    ),
    @frege.runtime.Meta.SymV(
      offset=3504, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pPack"),
      stri="s(suuu)", sig=45, depth=4, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=6362, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pNatural"),
      stri="s(u)", sig=37, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=6652, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pParens"),
      stri="s(uu)", sig=35, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=4509, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pSome_ng"),
      stri="s(su)", sig=39, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=5721, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pSome"),
      stri="s(su)", sig=43, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=7003, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pSemiList"),
      stri="s(su)", sig=42, depth=2, rkind=20
    ),
    @frege.runtime.Meta.SymV(
      offset=3206, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pToken"),
      stri="s(su)", sig=46, depth=2, rkind=16
    ),
    @frege.runtime.Meta.SymV(
      offset=3092, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pSymbol"),
      stri="s(us)", sig=48, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=908, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="pure"),
      stri="s(uu)", sig=49, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=2324, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="runParser"),
      stri="s(su)", sig=50, depth=2, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=3687, name=@frege.runtime.Meta.QName(pack="parselib.Simple", base="sequence"),
      stri="s(su)", sig=51, depth=2, rkind=16
    )
  },
  symls={},
  taus={
    @frege.runtime.Meta.Tau(suba=1, tvar="s"), @frege.runtime.Meta.Tau(suba=1, tvar="r"),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="->")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=0),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=4),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="(,)")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=1),
    @frege.runtime.Meta.Tau(kind=0, suba=7, subb=4),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=8),
    @frege.runtime.Meta.Tau(kind=0, suba=5, subb=9), @frege.runtime.Meta.Tau(suba=0, tvar="s"),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=11),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=12), @frege.runtime.Meta.Tau(suba=0, tvar="a"),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=15, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=16),
    @frege.runtime.Meta.Tau(kind=0, suba=13, subb=17),
    @frege.runtime.Meta.Tau(suba=0, tvar="b"), @frege.runtime.Meta.Tau(kind=0, suba=6, subb=19),
    @frege.runtime.Meta.Tau(kind=0, suba=20, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=21),
    @frege.runtime.Meta.Tau(kind=0, suba=13, subb=22),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=19),
    @frege.runtime.Meta.Tau(kind=0, suba=24, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=25),
    @frege.runtime.Meta.Tau(kind=0, suba=26, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=27),
    @frege.runtime.Meta.Tau(kind=0, suba=13, subb=28),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=30, subb=19),
    @frege.runtime.Meta.Tau(suba=2, tvar="β"), @frege.runtime.Meta.Tau(suba=0, tvar="γ"),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=33), @frege.runtime.Meta.Tau(suba=0, tvar="α"),
    @frege.runtime.Meta.Tau(kind=0, suba=32, subb=35),
    @frege.runtime.Meta.Tau(kind=0, suba=34, subb=36),
    @frege.runtime.Meta.Tau(kind=0, suba=30, subb=23),
    @frege.runtime.Meta.Tau(kind=0, suba=30, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=30, subb=39),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=40),
    @frege.runtime.Meta.Tau(kind=0, suba=41, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=42),
    @frege.runtime.Meta.Tau(kind=0, suba=13, subb=43),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=18),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Bool")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=49, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=50),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=11),
    @frege.runtime.Meta.Tau(kind=0, suba=52, subb=48),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=11),
    @frege.runtime.Meta.Tau(kind=0, suba=54, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=55),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Maybe")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=57, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=58),
    @frege.runtime.Meta.Tau(kind=0, suba=59, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=60),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=46),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=46),
    @frege.runtime.Meta.Tau(kind=0, suba=63, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=64),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=15, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=67),
    @frege.runtime.Meta.Tau(kind=0, suba=66, subb=68),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=47),
    @frege.runtime.Meta.Tau(kind=0, suba=70, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=71),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=73),
    @frege.runtime.Meta.Tau(kind=0, suba=74, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=75),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=14),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=77),
    @frege.runtime.Meta.Tau(kind=0, suba=78, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=79),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=81, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=82),
    @frege.runtime.Meta.Tau(kind=0, suba=78, subb=62),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=84),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=19),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=86),
    @frege.runtime.Meta.Tau(kind=0, suba=87, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=88), @frege.runtime.Meta.Tau(suba=0, tvar="c"),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=90),
    @frege.runtime.Meta.Tau(kind=0, suba=91, subb=12),
    @frege.runtime.Meta.Tau(kind=0, suba=3, subb=92),
    @frege.runtime.Meta.Tau(kind=0, suba=13, subb=93)
  },
  rhos={
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=10),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=18),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=23),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=12),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=22),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=4), @frege.runtime.Meta.Rho(sigma=2, rhotau=5),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=6),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=29),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=17),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=9), @frege.runtime.Meta.Rho(sigma=2, rhotau=10),
    @frege.runtime.Meta.Rho(sigma=5, rhotau=11),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=31),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=5), @frege.runtime.Meta.Rho(sigma=7, rhotau=14),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=19),
    @frege.runtime.Meta.Rho(sigma=9, rhotau=14), @frege.runtime.Meta.Rho(sigma=1, rhotau=11),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=37),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=33),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=36),
    @frege.runtime.Meta.Rho(sigma=13, rhotau=21), @frege.runtime.Meta.Rho(sigma=12, rhotau=22),
    @frege.runtime.Meta.Rho(
      cont={
        @frege.runtime.Meta.Context(
          clas=@frege.runtime.Meta.QName(
            kind=0, pack="frege.prelude.PreludeList", base="Empty"
          ),
          tau=32
        )
      },
      sigma=12, rhotau=23
    ),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=10), @frege.runtime.Meta.Rho(sigma=1, rhotau=25),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=38),
    @frege.runtime.Meta.Rho(sigma=16, rhotau=5), @frege.runtime.Meta.Rho(sigma=1, rhotau=28),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=44),
    @frege.runtime.Meta.Rho(sigma=18, rhotau=10), @frege.runtime.Meta.Rho(sigma=1, rhotau=31),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=45),
    @frege.runtime.Meta.Rho(sigma=20, rhotau=10),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=46),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=47),
    @frege.runtime.Meta.Rho(sigma=22, rhotau=36),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=48),
    @frege.runtime.Meta.Rho(sigma=22, rhotau=38),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=51),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=40),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=53),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=56),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=43), @frege.runtime.Meta.Rho(sigma=26, rhotau=44),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=61),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=46), @frege.runtime.Meta.Rho(sigma=1, rhotau=47),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=14),
    @frege.runtime.Meta.Rho(sigma=29, rhotau=10), @frege.runtime.Meta.Rho(sigma=1, rhotau=50),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=62),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=65),
    @frege.runtime.Meta.Rho(sigma=32, rhotau=53),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=69),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=68),
    @frege.runtime.Meta.Rho(sigma=32, rhotau=56), @frege.runtime.Meta.Rho(sigma=34, rhotau=57),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=72),
    @frege.runtime.Meta.Rho(sigma=32, rhotau=59),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=76),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=61),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=80),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=63), @frege.runtime.Meta.Rho(sigma=1, rhotau=64),
    @frege.runtime.Meta.Rho(sigma=2, rhotau=64), @frege.runtime.Meta.Rho(sigma=1, rhotau=66),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=83),
    @frege.runtime.Meta.Rho(sigma=32, rhotau=68),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=85),
    @frege.runtime.Meta.Rho(sigma=32, rhotau=70), @frege.runtime.Meta.Rho(sigma=34, rhotau=71),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=89),
    @frege.runtime.Meta.Rho(sigma=3, rhotau=73), @frege.runtime.Meta.Rho(sigma=2, rhotau=74),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=94),
    @frege.runtime.Meta.Rho(sigma=44, rhotau=5), @frege.runtime.Meta.Rho(sigma=2, rhotau=77),
    @frege.runtime.Meta.Rho(sigma=1, rhotau=78),
    @frege.runtime.Meta.Rho(
      cont={
        @frege.runtime.Meta.Context(
          clas=@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"),
          tau=11
        )
      },
      sigma=3, rhotau=41
    ),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=11),
    @frege.runtime.Meta.Rho(
      cont={
        @frege.runtime.Meta.Context(
          clas=@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Eq"),
          tau=11
        )
      },
      sigma=47, rhotau=44
    ),
    @frege.runtime.Meta.Rho(sigma=20, rhotau=64)
  },
  sigmas={
    @frege.runtime.Meta.Sigma(bound={"s", "r"}, kinds={1, 1}, rho=0),
    @frege.runtime.Meta.Sigma(rho=1), @frege.runtime.Meta.Sigma(rho=2),
    @frege.runtime.Meta.Sigma(rho=3),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=7),
    @frege.runtime.Meta.Sigma(rho=8),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=12),
    @frege.runtime.Meta.Sigma(rho=13),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=15),
    @frege.runtime.Meta.Sigma(rho=16),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=17),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=18),
    @frege.runtime.Meta.Sigma(rho=19), @frege.runtime.Meta.Sigma(rho=20),
    @frege.runtime.Meta.Sigma(bound={"β", "α", "γ"}, kinds={2, 0, 0}, rho=24),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=26),
    @frege.runtime.Meta.Sigma(rho=27),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=29),
    @frege.runtime.Meta.Sigma(rho=30),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=32),
    @frege.runtime.Meta.Sigma(rho=33),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=34),
    @frege.runtime.Meta.Sigma(rho=35), @frege.runtime.Meta.Sigma(rho=37),
    @frege.runtime.Meta.Sigma(rho=39),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=41),
    @frege.runtime.Meta.Sigma(rho=42),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=45),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=48),
    @frege.runtime.Meta.Sigma(rho=49),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=51),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=10),
    @frege.runtime.Meta.Sigma(rho=52), @frege.runtime.Meta.Sigma(rho=54),
    @frege.runtime.Meta.Sigma(rho=55),
    @frege.runtime.Meta.Sigma(bound={"a"}, kinds={0}, rho=58),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=44),
    @frege.runtime.Meta.Sigma(rho=60),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=62),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=65),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "s"}, kinds={0, 0, 0}, rho=67),
    @frege.runtime.Meta.Sigma(rho=69),
    @frege.runtime.Meta.Sigma(bound={"a"}, kinds={0}, rho=72),
    @frege.runtime.Meta.Sigma(bound={"s", "b"}, kinds={0, 0}, rho=75),
    @frege.runtime.Meta.Sigma(rho=76),
    @frege.runtime.Meta.Sigma(bound={"b", "a", "c", "s"}, kinds={0, 0, 0, 0}, rho=79),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=80),
    @frege.runtime.Meta.Sigma(rho=81),
    @frege.runtime.Meta.Sigma(bound={"s"}, kinds={0}, rho=82),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=50),
    @frege.runtime.Meta.Sigma(bound={"a", "s"}, kinds={0, 0}, rho=25),
    @frege.runtime.Meta.Sigma(bound={"s", "a"}, kinds={0, 0}, rho=83)
  },
  exprs={@frege.runtime.Meta.Expr()},
  kinds={
    @frege.runtime.Meta.Kind(kind=0), @frege.runtime.Meta.Kind(kind=2),
    @frege.runtime.Meta.Kind(kind=3, suba=0, subb=0)
  }
)

final public class Simple {
final public static Ĳ ĳ = new Ĳ();
final public static frege.runtime.Lazy _lt_star_gt(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  final class Flc$3_3221 extends frege.runtime.Func1  {
    final public frege.runtime.Lazy work(final PreludeBase.TList arg$4) {
      final Flc$3_3221 this3221 = this;
      final PreludeBase.TList.DCons $100000 = arg$4._Cons();
      if ($100000 != null) {
        final PreludeBase.TTuple2 $100001 = 
          frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100000.mem1)
        ;
        final class Flc$6_3226 extends frege.runtime.Func1  {
          final public frege.runtime.Lazy work(final PreludeBase.TList arg$5) {
            final Flc$6_3226 this3226 = this;
            final PreludeBase.TList.DCons $100002 = arg$5._Cons();
            if ($100002 != null) {
              final PreludeBase.TTuple2 $100003 = 
                frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100002.mem1)
              ;
              return PreludeBase.TList.DCons.mk(
                        PreludeBase.TTuple2.mk(
                              frege.runtime.Delayed.delayed($100001.mem1)
                              .<frege.runtime.Lambda>forced().apply($100003.mem1).result(),
                              frege.runtime.Delayed.delayed($100003.mem2)
                            ),
                        this3226.apply($100002.mem2)
                      );
            }
            final PreludeBase.TList.DList $100004 = arg$5._List();
            assert $100004 != null;
            return this3221.apply($100000.mem2);
          }
          final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
            return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
          }
        }
        final Flc$6_3226 lc$6_3226 = new Flc$6_3226();
        return lc$6_3226.apply(
                  PreludeList.IListSource__lbrack_rbrack.toListƒ.apply(
                        arg$2.<frege.runtime.Lambda>forced().apply(
                              frege.runtime.Delayed.delayed($100001.mem2)
                            ).result()
                      )
                );
      }
      final PreludeBase.TList.DList $100005 = arg$4._List();
      assert $100005 != null;
      return PreludeBase.TList.DList.it;
    }
    final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
    }
  }
  final Flc$3_3221 lc$3_3221 = new Flc$3_3221();
  return lc$3_3221.apply(
            PreludeList.IListSource__lbrack_rbrack.toListƒ.apply(arg$1.apply(arg$3).result())
          );
}
final public static PreludeBase.TList _lt$_gt(
  final frege.runtime.Lazy arg$1, final frege.runtime.Lambda arg$2,
  final frege.runtime.Lazy arg$3
) {
  final class Flc$9_3234 extends frege.runtime.Func1  {
    final public PreludeBase.TList work(final PreludeBase.TList arg$4) {
      final Flc$9_3234 this3234 = this;
      final PreludeBase.TList.DCons $100006 = arg$4._Cons();
      if ($100006 != null) {
        final PreludeBase.TTuple2 $100007 = 
          frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100006.mem1)
        ;
        return PreludeBase.TList.DCons.mk(
                  PreludeBase.TTuple2.mk(
                        arg$1.<frege.runtime.Lambda>forced().apply($100007.mem1).result(),
                        frege.runtime.Delayed.delayed($100007.mem2)
                      ),
                  this3234.apply($100006.mem2)
                );
      }
      final PreludeBase.TList.DList $100008 = arg$4._List();
      assert $100008 != null;
      return PreludeBase.TList.DList.it;
    }
    final public PreludeBase.TList eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
    }
  }
  final Flc$9_3234 lc$9_3234 = new Flc$9_3234();
  return lc$9_3234.work(
            PreludeList.IListSource__lbrack_rbrack.toList(
                  arg$2.apply(arg$3).result().<PreludeBase.TList>forced()
                )
          );
}
final public static frege.runtime.Lazy _star_gt(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.Ĳ.flipƒ.apply(PreludeBase.Ĳ._constƒ).result()).apply(
                  arg$1
                ).result(),
            arg$2, arg$3
          );
}
final public static PreludeBase.TList pure(
  final java.lang.Object arg$1, final frege.runtime.Lazy arg$2
) {
  return PreludeBase.TList.DCons.mk(
            PreludeBase.TTuple2.mk(arg$1, arg$2), PreludeBase.TList.DList.it
          );
}
final public static frege.runtime.Lazy sequence(
  final PreludeBase.TList arg$1, final frege.runtime.Lazy arg$2
) {
  final PreludeBase.TList.DList $100009 = arg$1._List();
  if ($100009 != null) {
    return Simple.pure(PreludeBase.TList.DList.it, arg$2);
  }
  final PreludeBase.TList.DCons $100010 = arg$1._Cons();
  assert $100010 != null;
  final frege.runtime.Lambda p_3267 = 
    frege.runtime.Delayed.<frege.runtime.Lambda>forced($100010.mem1)
  ;
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(p_3267).result(),
            Ĳ.sequenceƒ.apply($100010.mem2).result(), arg$2
          );
}
final public static PreludeBase.TList _lt$(
  final java.lang.Object arg$1, final frege.runtime.Lambda arg$2, final frege.runtime.Lazy arg$3
) {
  return Simple._lt$_gt(PreludeBase.Ĳ._constƒ.apply(arg$1).result(), arg$2, arg$3);
}
final public static PreludeBase.TList runParser(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return ((frege.runtime.Applicable)PreludeBase.id(arg$1)).apply(arg$2).result()
      .<PreludeBase.TList>forced();
}
final public static frege.runtime.Lazy _lt_star(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.Ĳ._constƒ).apply(arg$1).result(), arg$2, arg$3
          );
}
final public static PreludeBase.TList pSatisfy(
  final frege.runtime.Lazy arg$1, final PreludeBase.TList arg$2
) {
  final PreludeBase.TList.DCons $100012 = arg$2._Cons();
  if ($100012 != null) {
    final frege.runtime.Lambda p_3203 = arg$1.<frege.runtime.Lambda>forced();
    if (
      (boolean)frege.runtime.Delayed.<java.lang.Boolean>forced(
            p_3203.apply($100012.mem1).result()
          )
    ) {
      return PreludeBase.TList.DCons.mk(
                PreludeBase.TTuple2.mk($100012.mem1, $100012.mem2), PreludeBase.TList.DList.it
              );
    }
  }
  return PreludeBase.TList.DList.it;
}
final public static PreludeBase.TList pSymbol(
  final PreludeBase.CEq ctx$1, final java.lang.Object arg$1, final PreludeBase.TList arg$2
) {
  return Simple.pSatisfy(
            PreludeBase.Ĳ.flipƒ.apply(ctx$1.ƒ_eq_eq()).apply(arg$1).result(), arg$2
          );
}
final public static java.lang.Object _lt_lt_bar_gt(
  final PreludeList.CEmpty ctx$1, final frege.runtime.Lazy arg$1,
  final frege.runtime.Lazy arg$2, final java.lang.Object arg$3
) {
  final java.lang.Object r_3217 = arg$1.<frege.runtime.Lambda>forced().apply(arg$3).result();
  if (
    (boolean)frege.runtime.Delayed.<java.lang.Boolean>forced(
          ctx$1.ƒ_null().apply(r_3217).result()
        )
  ) {
    return arg$2.<frege.runtime.Lambda>forced().apply(arg$3).result();
  }
  else {
    return r_3217;
  }
}
final public static frege.runtime.Lazy pToken(
  final PreludeBase.CEq ctx$1, final PreludeBase.TList arg$1, final frege.runtime.Lazy arg$2
) {
  final PreludeBase.TList.DList $100014 = arg$1._List();
  if ($100014 != null) {
    return Simple.pure(PreludeBase.TList.DList.it, arg$2);
  }
  final PreludeBase.TList.DCons $100015 = arg$1._Cons();
  assert $100015 != null;
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(
                  Ĳ.pSymbolƒ(ctx$1).apply($100015.mem1).result()
                ).result(),
            Ĳ.pTokenƒ(ctx$1).apply($100015.mem2).result(), arg$2
          );
}
final public static PreludeBase.TList _lt_bar_gt(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return PreludeList.IListLike__lbrack_rbrack._plus_plus(
            arg$1.apply(arg$3).result().<PreludeBase.TList>forced(),
            arg$2.<frege.runtime.Lambda>forced().apply(arg$3).result()
          );
}
final public static PreludeBase.TList pMany_ng(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Simple._lt_bar_gt(
            Ĳ._lt_star_gtƒ.apply(
                  Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(arg$1).result()
                ).apply(Ĳ.pMany_ngƒ.apply(arg$1).result()).result()
            .<frege.runtime.Lambda>forced(),
            Ĳ.pureƒ.apply(PreludeBase.TList.DList.it).result(), arg$2
          );
}
final public static frege.runtime.Lazy pListSep(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(arg$1).result(),
            Ĳ.pMany_ngƒ.apply(Ĳ._star_gtƒ.apply(arg$2).apply(arg$1).result()).result(), arg$3
          );
}
final public static frege.runtime.Lazy pSemiList(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ.pListSepƒ.apply(
            arg$1, Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(';').result(), arg$2
          );
}
final public static frege.runtime.Lazy _gt_gt_eq(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  final class Flc$12_3242 extends frege.runtime.Func1  {
    final public frege.runtime.Lazy work(final PreludeBase.TList arg$4) {
      final Flc$12_3242 this3242 = this;
      final PreludeBase.TList.DCons $100016 = arg$4._Cons();
      if ($100016 != null) {
        final PreludeBase.TTuple2 $100017 = 
          frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100016.mem1)
        ;
        final class Flc$15_3247 extends frege.runtime.Func1  {
          final public frege.runtime.Lazy work(final PreludeBase.TList arg$5) {
            final Flc$15_3247 this3247 = this;
            final PreludeBase.TList.DCons $100018 = arg$5._Cons();
            if ($100018 != null) {
              final PreludeBase.TTuple2 $100019 = 
                frege.runtime.Delayed.<PreludeBase.TTuple2>forced($100018.mem1)
              ;
              return PreludeBase.TList.DCons.mk(
                        PreludeBase.TTuple2.mk(
                              $100019.mem1, frege.runtime.Delayed.delayed($100019.mem2)
                            ),
                        this3247.apply($100018.mem2)
                      );
            }
            final PreludeBase.TList.DList $100020 = arg$5._List();
            assert $100020 != null;
            return this3242.apply($100016.mem2);
          }
          final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
            return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
          }
        }
        final Flc$15_3247 lc$15_3247 = new Flc$15_3247();
        return lc$15_3247.apply(
                  PreludeList.IListSource__lbrack_rbrack.toListƒ.apply(
                        arg$2.<frege.runtime.Lambda>forced().apply($100017.mem1).apply(
                              frege.runtime.Delayed.delayed($100017.mem2)
                            ).result()
                      )
                );
      }
      final PreludeBase.TList.DList $100021 = arg$4._List();
      assert $100021 != null;
      return PreludeBase.TList.DList.it;
    }
    final public frege.runtime.Lazy eval(final java.lang.Object arg$1) {
      return work(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
    }
  }
  final Flc$12_3242 lc$12_3242 = new Flc$12_3242();
  return lc$12_3242.apply(
            PreludeList.IListSource__lbrack_rbrack.toListƒ.apply(arg$1.apply(arg$3).result())
          );
}
final public static frege.runtime.Lazy pMany(
  final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
) {
  return frege.runtime.Delayed.<PreludeBase.TList>forced(
            Simple._lt_lt_bar_gt(
                  PreludeList.IListLike__lbrack_rbrack.it,
                  Ĳ._lt_star_gtƒ.apply(
                        Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(arg$1).result()
                      ).apply(Ĳ.pManyƒ.apply(arg$1).result()).result(),
                  Ĳ.pureƒ.apply(PreludeBase.TList.DList.it).result(), arg$2
                )
          );
}
final public static frege.runtime.Lazy pSome(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(arg$1).result(),
            Ĳ.pManyƒ.apply(arg$1).result(), arg$2
          );
}
final public static PreludeBase.TList pEmpty(final frege.runtime.Lazy arg$1) {
  return PreludeBase.TList.DList.it;
}
final public static PreludeBase.TList pFail(final frege.runtime.Lazy arg$1) {
  return Simple.pEmpty(arg$1);
}
final public static frege.runtime.Lazy anon$191(
  final PreludeBase.TList arg$1, final frege.runtime.Lazy arg$2
) {
  return (PreludeList.IListLike__lbrack_rbrack._null(arg$1) ? Ĳ.pureƒ.apply(
                PreludeBase.TUnit.Unit
              ).result().<frege.runtime.Lambda>forced() : Ĳ.pFailƒ).apply(arg$2).result();
}
final public static frege.runtime.Lazy pSome_ng(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(arg$1).result(),
            Ĳ.pMany_ngƒ.apply(arg$1).result(), arg$2
          );
}
final public static int anon$205(final int arg$1, final int arg$2) {
  return (arg$1 * 10) + arg$2;
}
final public static frege.runtime.Lazy pPack(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3, final frege.runtime.Lazy arg$4
) {
  return Ĳ._lt_starƒ.apply(Ĳ._star_gtƒ.apply(arg$1).apply(arg$2).result(), arg$3, arg$4);
}
final public static frege.runtime.Lazy pParens(
  final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ.pPackƒ.apply(
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply('(').result(), arg$1,
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(')').result(), arg$2
          );
}
final public static java.lang.Object h(
  final PreludeBase.TList arg$1, final java.lang.Object arg$2
) {
  return frege.runtime.Delayed.<java.lang.Object>forced(
            PreludeList.foldr(PreludeBase.Ĳ._dollarƒ, arg$2, arg$1)
          );
}
final public static java.lang.Object j(
  final java.lang.Object arg$1, final frege.runtime.Lambda arg$2
) {
  return arg$2.apply(arg$1).result();
}
final public static frege.runtime.Lazy chainr(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(Ĳ.hƒ).apply(
                  Ĳ.pMany_ngƒ.apply(
                        Ĳ._lt_star_gtƒ.apply(Ĳ._lt$_gtƒ.apply(Ĳ.jƒ).apply(arg$1).result())
                        .apply(arg$2).result()
                      ).result()
                ).result(),
            arg$1, arg$3
          );
}
final public static PreludeBase.TList pDigit(final PreludeBase.TList arg$1) {
  return Simple.pSatisfy(Ĳ.isDigitƒ, arg$1);
}
final public static PreludeBase.TList pDigitAsInt(final frege.runtime.Lazy arg$1) {
  return Simple._lt$_gt(Ĳ.getNumericValueƒ, Ĳ.pDigitƒ, arg$1);
}
final public static PreludeBase.TList pNatural(final frege.runtime.Lazy arg$1) {
  return Simple._lt$_gt(
            PreludeList.Ĳ.foldlƒ.apply(Ĳ.anon$205ƒ).apply(0).result(),
            Ĳ.pSomeƒ.apply(Ĳ.pDigitAsIntƒ).result().<frege.runtime.Lambda>forced(), arg$1
          );
}
final public static java.lang.Object hα(
  final java.lang.Object arg$1, final PreludeBase.TList arg$2
) {
  return PreludeList.foldl(
            PreludeBase.Ĳ.flipƒ.apply(PreludeBase.Ĳ._dollarƒ).result(), arg$1, arg$2
          );
}
final public static java.lang.Object jα(
  final frege.runtime.Lambda arg$1, final java.lang.Object arg$2, final java.lang.Object arg$3
) {
  return frege.runtime.Delayed.<java.lang.Object>forced(PreludeBase.flip(arg$1, arg$2, arg$3));
}
final public static frege.runtime.Lazy chainl(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2,
  final frege.runtime.Lazy arg$3
) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(Ĳ.hαƒ).apply(arg$1).result(),
            Ĳ.pMany_ngƒ.apply(
                  Ĳ._lt_star_gtƒ.apply(Ĳ._lt$_gtƒ.apply(Ĳ.jαƒ).apply(arg$2).result()).apply(
                        arg$1
                      ).result()
                ).result(),
            arg$3
          );
}
final public static frege.runtime.Lazy pList(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ.pListSepƒ.apply(
            arg$1, Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(',').result(), arg$2
          );
}
final public static frege.runtime.Lazy choice(
  final PreludeBase.TList arg$1, final frege.runtime.Lazy arg$2
) {
  return frege.runtime.Delayed.<frege.runtime.Applicable>forced(
            PreludeList.foldr(Ĳ._lt_bar_gtƒ, Ĳ.pEmptyƒ, arg$1)
          ).apply(arg$2).result().<PreludeBase.TList>forced();
}
final public static frege.runtime.Lazy pIdent(final frege.runtime.Lazy arg$1) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TList.DCons.mkƒ).apply(
                  Ĳ.pSatisfyƒ.apply(Ĳ.isLetterƒ).result()
                ).result(),
            Ĳ.pManyƒ.apply(Ĳ.pSatisfyƒ.apply(Ĳ.isLetterOrDigitƒ).result()).result(), arg$1
          );
}
final public static PreludeBase.TList look(final frege.runtime.Lazy arg$1) {
  return PreludeBase.TList.DCons.mk(
            PreludeBase.TTuple2.mk(arg$1, arg$1), PreludeBase.TList.DList.it
          );
}
final public static PreludeBase.TList opt(
  final frege.runtime.Lambda arg$1, final java.lang.Object arg$2, final frege.runtime.Lazy arg$3
) {
  return Simple._lt_bar_gt(arg$1, Ĳ.pureƒ.apply(arg$2).result(), arg$3);
}
final public static frege.runtime.Lazy pInteger(final frege.runtime.Lazy arg$1) {
  return Ĳ._lt_star_gtƒ.apply(
            Ĳ.optƒ.apply(
                  Ĳ._lt$_gtƒ.apply(
                        PreludeBase.Ĳ._constƒ.apply(PreludeBase.INum_Int.negateƒ).result()
                      ).apply(Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply('-').result()).result()
                ).apply(PreludeBase.Ĳ.idƒ).result(),
            Ĳ.pNaturalƒ, arg$1
          );
}
final public static PreludeBase.TList optional(
  final frege.runtime.Lambda arg$1, final frege.runtime.Lazy arg$2
) {
  return Simple.opt(
            Ĳ._lt$_gtƒ.apply(PreludeBase.TMaybe.DJust.mkƒ).apply(arg$1).result()
            .<frege.runtime.Lambda>forced(),
            PreludeBase.TMaybe.DNothing.it, arg$2
          );
}
final public static frege.runtime.Lazy pEnd(final frege.runtime.Lazy arg$1) {
  return Ĳ._gt_gt_eqƒ.apply(Ĳ.lookƒ, Ĳ.anon$191ƒ, arg$1);
}
final public static frege.runtime.Lazy pBrace(
  final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ.pPackƒ.apply(
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply('{').result(), arg$1,
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply('}').result(), arg$2
          );
}
final public static PreludeBase.TList pEpsilon(final frege.runtime.Lazy arg$1) {
  return Simple.pure(PreludeBase.TUnit.Unit, arg$1);
}
final public static PreludeBase.TList pAny(final PreludeBase.TList arg$1) {
  final PreludeBase.TList.DCons $100022 = arg$1._Cons();
  if ($100022 != null) {
    return PreludeBase.TList.DCons.mk(
              PreludeBase.TTuple2.mk($100022.mem1, $100022.mem2), PreludeBase.TList.DList.it
            );
  }
  final PreludeBase.TList.DList $100023 = arg$1._List();
  assert $100023 != null;
  return PreludeBase.TList.DList.it;
}
final public static frege.runtime.Lazy pBracket(
  final frege.runtime.Lazy arg$1, final frege.runtime.Lazy arg$2
) {
  return Ĳ.pPackƒ.apply(
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply('[').result(), arg$1,
            Ĳ.pSymbolƒ(PreludeBase.IEq_Char.it).apply(']').result(), arg$2
          );
}
public static class Ĳ  {
  public Ĳ() {}
  final public static frege.runtime.Func3 _star_gtƒ = new Simple.Lambda3a(0);
  final public static frege.runtime.Func3 _lt_star_gtƒ = new Simple.Lambda3a(1);
  final public static frege.runtime.Func3 _lt$_gtƒ = new Simple.Lambda3a(2);
  final public static frege.runtime.Func3 _lt$ƒ = new Simple.Lambda3a(3);
  final public static frege.runtime.Func3 _lt_starƒ = new Simple.Lambda3a(4);
  final public static frege.runtime.Func3 _lt_lt_bar_gtƒ(final PreludeList.CEmpty arg$1) {
    return new Simple.Lambda3aC1376440806(0, arg$1);
  }
  final public static frege.runtime.Func3 _lt_bar_gtƒ = new Simple.Lambda3a(5);
  final public static frege.runtime.Func3 _gt_gt_eqƒ = new Simple.Lambda3a(6);
  final public static frege.runtime.Func2 anon$191ƒ = new Simple.Lambda2a(0);
  final public static frege.runtime.Func2 anon$205ƒ = new Simple.Lambda2a(1);
  final public static frege.runtime.Func3 chainrƒ = new Simple.Lambda3a(7);
  final public static frege.runtime.Func3 chainlƒ = new Simple.Lambda3a(8);
  final public static frege.runtime.Func2 choiceƒ = new Simple.Lambda2a(2);
  final public static frege.runtime.Func1 getNumericValueƒ = new Simple.Lambda1a(0);
  final public static frege.runtime.Func2 hƒ = new Simple.Lambda2a(3);
  final public static frege.runtime.Func2 hαƒ = new Simple.Lambda2a(4);
  final public static frege.runtime.Func1 isDigitƒ = new Simple.Lambda1a(1);
  final public static frege.runtime.Func1 isLetterƒ = new Simple.Lambda1a(2);
  final public static frege.runtime.Func1 isLetterOrDigitƒ = new Simple.Lambda1a(3);
  final public static frege.runtime.Func2 jƒ = new Simple.Lambda2a(5);
  final public static frege.runtime.Func3 jαƒ = new Simple.Lambda3a(9);
  final public static frege.runtime.Func1 lookƒ = new Simple.Lambda1a(4);
  final public static frege.runtime.Func2 pSatisfyƒ = new Simple.Lambda2a(6);
  final public static frege.runtime.Func2 optionalƒ = new Simple.Lambda2a(7);
  final public static frege.runtime.Func3 optƒ = new Simple.Lambda3a(10);
  final public static frege.runtime.Func1 pFailƒ = new Simple.Lambda1a(5);
  final public static frege.runtime.Func1 pEmptyƒ = new Simple.Lambda1a(6);
  final public static frege.runtime.Func1 pDigitƒ = new Simple.Lambda1a(7);
  final public static frege.runtime.Func2 pBraceƒ = new Simple.Lambda2a(8);
  final public static frege.runtime.Func1 pAnyƒ = new Simple.Lambda1a(8);
  final public static frege.runtime.Func2 pBracketƒ = new Simple.Lambda2a(9);
  final public static frege.runtime.Func1 pDigitAsIntƒ = new Simple.Lambda1a(9);
  final public static frege.runtime.Func1 pEpsilonƒ = new Simple.Lambda1a(10);
  final public static frege.runtime.Func1 pEndƒ = new Simple.Lambda1a(11);
  final public static frege.runtime.Func2 pMany_ngƒ = new Simple.Lambda2a(10);
  final public static frege.runtime.Func3 pListSepƒ = new Simple.Lambda3a(11);
  final public static frege.runtime.Func1 pIntegerƒ = new Simple.Lambda1a(12);
  final public static frege.runtime.Func1 pIdentƒ = new Simple.Lambda1a(13);
  final public static frege.runtime.Func2 pListƒ = new Simple.Lambda2a(11);
  final public static frege.runtime.Func2 pManyƒ = new Simple.Lambda2a(12);
  final public static frege.runtime.Func4 pPackƒ = new Simple.Lambda4a(0);
  final public static frege.runtime.Func1 pNaturalƒ = new Simple.Lambda1a(14);
  final public static frege.runtime.Func2 pParensƒ = new Simple.Lambda2a(13);
  final public static frege.runtime.Func2 pSome_ngƒ = new Simple.Lambda2a(14);
  final public static frege.runtime.Func2 pSomeƒ = new Simple.Lambda2a(15);
  final public static frege.runtime.Func2 pSemiListƒ = new Simple.Lambda2a(16);
  final public static frege.runtime.Func2 pTokenƒ(final PreludeBase.CEq arg$1) {
    return new Simple.Lambda2aC3505394578(0, arg$1);
  }
  final public static frege.runtime.Func2 pSymbolƒ(final PreludeBase.CEq arg$1) {
    return new Simple.Lambda2aC3505394578(1, arg$1);
  }
  final public static frege.runtime.Func2 pureƒ = new Simple.Lambda2a(17);
  final public static frege.runtime.Func2 runParserƒ = new Simple.Lambda2a(18);
  final public static frege.runtime.Func2 sequenceƒ = new Simple.Lambda2a(19);
}
final private static class Lambda3a extends frege.runtime.Func3  {
  final int index ;
  public Lambda3a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$3, final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return Simple._star_gt(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 1: {
        return Simple._lt_star_gt(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 2: {
        return Simple._lt$_gt(
                  frege.runtime.Delayed.delayed(arg$1),
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$2),
                  frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 3: {
        return Simple._lt$(
                  arg$1, frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$2),
                  frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 4: {
        return Simple._lt_star(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 5: {
        return Simple._lt_bar_gt(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 6: {
        return Simple._gt_gt_eq(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 7: {
        return Simple.chainr(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 8: {
        return Simple.chainl(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 9: {
        return Simple.jα(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1), arg$2, arg$3
                );
      }
      case 10: {
        return Simple.opt(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1), arg$2,
                  frege.runtime.Delayed.delayed(arg$3)
                );
      }
      case 11: {
        return Simple.pListSep(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda2a extends frege.runtime.Func2  {
  final int index ;
  public Lambda2a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return Simple.anon$191(
                  frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 1: {
        return Simple.anon$205(
                  frege.runtime.Delayed.<java.lang.Integer>forced(arg$1),
                  frege.runtime.Delayed.<java.lang.Integer>forced(arg$2)
                );
      }
      case 2: {
        return Simple.choice(
                  frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 3: {
        return Simple.h(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1), arg$2);
      }
      case 4: {
        return Simple.hα(arg$1, frege.runtime.Delayed.<PreludeBase.TList>forced(arg$2));
      }
      case 5: {
        return Simple.j(arg$1, frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$2));
      }
      case 6: {
        return Simple.pSatisfy(
                  frege.runtime.Delayed.delayed(arg$1),
                  frege.runtime.Delayed.<PreludeBase.TList>forced(arg$2)
                );
      }
      case 7: {
        return Simple.optional(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 8: {
        return Simple.pBrace(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 9: {
        return Simple.pBracket(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 10: {
        return Simple.pMany_ng(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 11: {
        return Simple.pList(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 12: {
        return Simple.pMany(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 13: {
        return Simple.pParens(
                  frege.runtime.Delayed.delayed(arg$1), frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 14: {
        return Simple.pSome_ng(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 15: {
        return Simple.pSome(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 16: {
        return Simple.pSemiList(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 17: {
        return Simple.pure(arg$1, frege.runtime.Delayed.delayed(arg$2));
      }
      case 18: {
        return Simple.runParser(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 19: {
        return Simple.sequence(
                  frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda1a extends frege.runtime.Func1  {
  final int index ;
  public Lambda1a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(final java.lang.Object arg$1) {
    switch (index) {
      case 0: {
        return java.lang.Character.getNumericValue(
              (char)frege.runtime.Delayed.<java.lang.Character>forced(arg$1)
            );
      }
      case 1: {
        return java.lang.Character.isDigit(
              (char)frege.runtime.Delayed.<java.lang.Character>forced(arg$1)
            );
      }
      case 2: {
        return java.lang.Character.isLetter(
              (char)frege.runtime.Delayed.<java.lang.Character>forced(arg$1)
            );
      }
      case 3: {
        return java.lang.Character.isLetterOrDigit(
              (char)frege.runtime.Delayed.<java.lang.Character>forced(arg$1)
            );
      }
      case 4: {
        return Simple.look(frege.runtime.Delayed.delayed(arg$1));
      }
      case 5: {
        return Simple.pFail(frege.runtime.Delayed.delayed(arg$1));
      }
      case 6: {
        return Simple.pEmpty(frege.runtime.Delayed.delayed(arg$1));
      }
      case 7: {
        return Simple.pDigit(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
      }
      case 8: {
        return Simple.pAny(frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1));
      }
      case 9: {
        return Simple.pDigitAsInt(frege.runtime.Delayed.delayed(arg$1));
      }
      case 10: {
        return Simple.pEpsilon(frege.runtime.Delayed.delayed(arg$1));
      }
      case 11: {
        return Simple.pEnd(frege.runtime.Delayed.delayed(arg$1));
      }
      case 12: {
        return Simple.pInteger(frege.runtime.Delayed.delayed(arg$1));
      }
      case 13: {
        return Simple.pIdent(frege.runtime.Delayed.delayed(arg$1));
      }
      case 14: {
        return Simple.pNatural(frege.runtime.Delayed.delayed(arg$1));
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda2aC3505394578 extends frege.runtime.Func2  {
  final int index ;
  final PreludeBase.CEq ctx$1 ;
  public Lambda2aC3505394578(final int arg$1, final PreludeBase.CEq arg$2) {
    index = arg$1;
    ctx$1 = arg$2;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return Simple.pToken(
                  ctx$1, frege.runtime.Delayed.<PreludeBase.TList>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2)
                );
      }
      case 1: {
        return Simple.pSymbol(
                  ctx$1, arg$1, frege.runtime.Delayed.<PreludeBase.TList>forced(arg$2)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda3aC1376440806 extends frege.runtime.Func3  {
  final int index ;
  final PreludeList.CEmpty ctx$1 ;
  public Lambda3aC1376440806(final int arg$1, final PreludeList.CEmpty arg$2) {
    index = arg$1;
    ctx$1 = arg$2;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$3, final java.lang.Object arg$2, final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return Simple._lt_lt_bar_gt(
                  ctx$1, frege.runtime.Delayed.delayed(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), arg$3
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
final private static class Lambda4a extends frege.runtime.Func4  {
  final int index ;
  public Lambda4a(final int arg$1) {
    index = arg$1;
  }
  final public java.lang.Object eval(
    final java.lang.Object arg$4, final java.lang.Object arg$3, final java.lang.Object arg$2,
    final java.lang.Object arg$1
  ) {
    switch (index) {
      case 0: {
        return Simple.pPack(
                  frege.runtime.Delayed.<frege.runtime.Lambda>forced(arg$1),
                  frege.runtime.Delayed.delayed(arg$2), frege.runtime.Delayed.delayed(arg$3),
                  frege.runtime.Delayed.delayed(arg$4)
                );
      }
    }
    throw new java.lang.Error("bad function number " + index);
  }
}
}
